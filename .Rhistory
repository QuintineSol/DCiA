shadow = list(enabled = FALSE)
) %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE),
nodesIdSelection = list(enabled = TRUE, style = "width: 150px;")) %>%
visLayout(randomSeed = 123) %>%
visInteraction(navigationButtons = TRUE) %>%
visEdges(smooth = FALSE)
}
})
# Dashboard Network Plot
output$networkPlot1 <- renderVisNetwork({
req(dataset())
g <- graph_from_data_frame(dataset(), directed = FALSE)
# Set the color of the node
V(g)$color <- "#1bbbff"
visNetwork::visIgraph(g) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visNodes(color = list(background = V(g)$color, border = "#2b2b2b", highlight = "#1F51FF"),
shadow = list(enabled = TRUE, size = 10, x = 0, y = 0)) %>%
visEdges(
# arrows = 'to',
color = list(color = "#cccccc", highlight = "#FF69B4"),
shadow = list(enabled = FALSE)
) %>%
visOptions(highlightNearest = list(enabled = TRUE, degree = 1, hover = TRUE),
nodesIdSelection = list(enabled = TRUE, style = "width: 150px;")) %>%
visLayout(randomSeed = 123) %>%
visInteraction(navigationButtons = TRUE) %>%
visEdges(smooth = FALSE)
}
)
# Graph Indices Count Plot
output$CountPlot <- renderPlot({
req(dataset())
g <- graph_from_data_frame(dataset(), directed = FALSE)
vertex_count <- igraph::vcount(g)
edge_count <- igraph::ecount(g)
scores <- cbind(edge_count, vertex_count)
distances <- cbind(edge_count, vertex_count)
plot_df <- data.frame(
Category = c("Edge", "Vertex"),
Counts = c(edge_count, vertex_count)
)
ggplot(plot_df, aes(x = Counts, y = Category, fill = Category)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Edge" = "#1bbbff", "Vertex" = "#FF69B4"), name = "Category") +
labs(x = "Counts", y = "Category", title = "Horizontal Bar Chart - Counts") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5), # Center the plot title
plot.margin = margin(10, 30, 10, 10) # Adjust plot margins
)
})
# Graph Indices Distance Plot
output$DistancePlot <- renderPlot({
req(dataset())
g <- graph_from_data_frame(dataset(), directed = FALSE)
mean_dist <- igraph::mean_distance(g)
radius <- igraph::radius(g)
diameter <- igraph::diameter(g)
plot_df <- data.frame(
Category = c("Mean Distance", "Radius", "Diameter"),
Distances = c(mean_dist, radius, diameter)
)
ggplot(plot_df, aes(x = Distances, y = Category, fill = Category)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Mean Distance" = "#1bbbff", "Radius" = "#FF69B4", "Diameter" = "#A9A9A9"), name = "Category") +
labs(x = "Distance", y = "Category", title = "Horizontal Bar Chart - Distances") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5), # Center the plot title
plot.margin = margin(10, 30, 10, 10) # Adjust plot margins
) +
coord_cartesian(xlim = c(0, max(plot_df$Distances))) # Adjust x-axis limits
})
# Render the transitivity
output$transitivityOutput <- renderText({
req(dataset())
g <- graph_from_data_frame(dataset(), directed = FALSE)
return (round(igraph::transitivity(g), 3))
})
# Render the density
output$densityOutput <- renderText({
req(dataset())
g <- graph_from_data_frame(dataset(), directed = FALSE)
return(round(igraph::graph.density(g), 3))
})
# Graph Indices Centralization Plot
output$CentralizationPlot <- renderPlot({
req(dataset())
g <- graph_from_data_frame(dataset(), directed = FALSE)
betweenness_centralization <- igraph::centr_betw(g, directed = FALSE)$centralization
closeness_centralization <- igraph::centr_clo(g, mode = 'out')$centralization
degree_centralization <- igraph::centr_degree(g, mode = 'all')$centralization
eigen_centralization <- igraph::centr_eigen(g, directed = FALSE)$centralization
plot_df <- data.frame(
Category = c("Betweenness", "Closeness", "Degree", "Eigenvector"),
Centralization = c(betweenness_centralization,
closeness_centralization,
degree_centralization,
eigen_centralization)
)
ggplot(plot_df, aes(x = Centralization, y = Category, fill = Category)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Betweenness" = "#1bbbff",
"Closeness" = "#FF69B4",
"Degree" = "#A9A9A9",
"Eigenvector" = "#1F51FF"
),
name = "Category") +
labs(x = "Centralization", y = "Category", title = "Horizontal Bar Chart - Centralization") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5), # Center the plot title
plot.margin = margin(10, 30, 10, 10) # Adjust plot margins
) +
coord_cartesian(xlim = c(0, max(plot_df$Centralization))) + # Adjust x-axis limits
coord_flip() # Flip the coordinates to make the bars vertical
})
# Distribution Plot
output$DistPlot <- renderPlot({
req(dataset())
g <- graph_from_data_frame(dataset(), directed = FALSE)
if (input$centrality == "Degree"){
result = igraph::degree(g, mode = "all")
binwidth = 0.25
}
if (input$centrality == "Betweenness"){
result = igraph::betweenness(g, directed = FALSE, normalized = TRUE)
binwidth = 0.01
}
if (input$centrality == "Closeness"){
result = igraph::closeness(g, mode = "all")
binwidth = 0.1
}
if (input$centrality == "Eccentricity"){
result = igraph::eccentricity(g, mode = 'all')
binwidth = 0.1
}
# Create a data frame containing the centrality measures
centrality_df <- data.frame(Centrality = result)
# Create a histogram using ggplot2
ggplot(centrality_df, aes(x = Centrality)) +
geom_histogram(binwidth = binwidth, fill = "#1bbbff", alpha = 1) +
labs(x = input$centrality, y = "Frequency", title = "Centrality Distribution Histogram") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5), # Center the plot title
)
})
# Centrality Boxplots
output$BoxPlot <- renderPlot({
req(dataset())
g <- graph_from_data_frame(dataset(), directed = FALSE)
if (input$centrality == "Degree"){
result = igraph::degree(g, mode = "all")
}
if (input$centrality == "Betweenness"){
result = igraph::betweenness(g, directed = FALSE, normalized = TRUE)
}
if (input$centrality == "Closeness"){
result = igraph::closeness(g, mode = "all")
}
if (input$centrality == "Eccentricity"){
result = igraph::eccentricity(g, mode = 'all')
}
# Create a data frame containing the centrality measures
centrality_df <- data.frame(Centrality = result)
# Create a histogram using ggplot2
ggplot(centrality_df, aes(x = Centrality)) +
geom_boxplot(fill = "#1bbbff", alpha = 1) +
labs(x = input$centrality, y = "Frequency", title = "Centrality Boxplots") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5), # Center the plot title
)
})
explanationOutput <- eventReactive(input$runAnalysis, {
req(analysisResult())
modularity_val <- analysisResult()$modularity
communities <- toString(unique(analysisResult()$memberships))
prompt <- sprintf("Explain the significance of a modularity score of %s and community memberships as follows: %s, in terms of network analysis and its potential impact.", modularity_val, communities)
# Set up API request
api_url <- "https://api-inference.huggingface.co/models/google/flan-t5-xxl"
api_key <- Sys.getenv("HUGGINGFACE_API_KEY")
headers <- add_headers(`Authorization` = paste("Bearer", api_key), `Content-Type` = "application/json")
body <- toJSON(list(inputs = prompt, parameters = list(max_new_tokens = 512)), auto_unbox = TRUE)
response <- POST(url = api_url, body = body, config = headers)
content <- content(response, "parsed")
if (response$status_code == 200) {
return(content$text)
} else {
return(sprintf("Failed to retrieve explanation. Status code: %s", response$status_code))
}
})
output$hfExplanation <- renderText({
explanationOutput()
})
# Activate the QAP analysis when "Run Analysis" button is clicked
observeEvent(input$QAPAnalysis, {
shouldQAPAnalyse(TRUE)
})
# Get the qap test running
QAP_test = eventReactive(input$QAPAnalysis, {
req(input$QAPreps)
req(shouldQAPAnalyse)
req(dataset())
req(dataset2())
g1 <- inet()
g2 <- inet2()
result = QAP_networks(g1, g2, reps = input$QAPreps,
net1_name = gsub("\\.\\w+$", "", input$file1$name),
net2_name = gsub("\\.\\w+$", "", input$file2$name))
print(paste('Test statistic:', result$testval))
result
})
# Print the QAP test
output$QAP = renderPrint({
req(QAP_test())
QAP_test()
})
# Plot the output of the QAP test
output$QAPplot = renderPlot({
req(QAP_test())
sna::plot.qaptest(QAP_test())
})
# If the statistic for the statistical comparison changes, stop the constant analysis
observe({
input$statisticChoice
shouldStatisticCompare(FALSE)
})
# Start the iteration of the analysis once the button is pressed
observeEvent(input$StatCompare, {
shouldStatisticCompare(TRUE)
})
# Load the values for the statistical comparisons once the button is pressed
Statistical_comparisons = eventReactive(input$StatCompare, {
req(shouldStatisticCompare())
req(dataset())
req(dataset2())
if (is.null(input$statisticChoice)){
showModal(
modalDialog(title = 'No Choice made',
'Please select at least one statistic to be tested in the choice menu',
easyClose = TRUE,
footer = modalButton("Got it!"))
)
}
statistics = c()
if ('Degree' %in% input$statisticChoice){
statistics = c(statistics, 'Degree' = T)
} else {
statistics = c(statistics, 'Degree' = F)
}
if ('Closeness' %in% input$statisticChoice){
statistics = c(statistics, 'Closeness' = T)
} else {
statistics = c(statistics, 'Closeness' = F)
}
if ('Betweenness' %in% input$statisticChoice){
statistics = c(statistics, 'Betweenness' = T)
} else {
statistics = c(statistics, 'Betweenness' = F)
}
g1 <- inet()
g2 <- inet2()
stats = compare_statistics(g1, g2, statistics = statistics,
net1_name = gsub("\\.\\w+$", "", input$file1$name),
net2_name = gsub("\\.\\w+$", "", input$file2$name))
})
# Print the output of the statistical comparison
output$Stats = renderPrint({
req(Statistical_comparisons())
Statistical_comparisons()
})
# Retrieve the plot showing the density of the degrees in both networks
degree_plot = eventReactive(input$StatCompare, {
req(input$StatCompare)
req(shouldStatisticCompare)
if ('Degree' %in% input$statisticChoice){
g1 <- inet()
g2 <- inet2()
compare_statistics(g1, g2, statistics = c('Degree' = T),
net1_name = gsub("\\.\\w+$", "", input$file1$name),
net2_name = gsub("\\.\\w+$", "", input$file2$name))$degree_plot
} else{
NULL
}
}, ignoreInit = T)
# Plot the denisty plot showing the degree in both networks
output$degree_plot = renderPlot({
req(degree_plot())
print(degree_plot())
})
# Retrieve the plot showing the density of the closeness in both networks
closeness_plot = eventReactive(input$StatCompare, {
req(input$StatCompare)
req(shouldStatisticCompare)
if ('Closeness' %in% input$statisticChoice){
g1 <- inet()
g2 <- inet2()
compare_statistics(g1, g2, statistics = c('Closeness' = T),
net1_name = gsub("\\.\\w+$", "", input$file1$name),
net2_name = gsub("\\.\\w+$", "", input$file2$name))$closeness_plot
} else{
NULL
}
}, ignoreInit = T)
# Plot the denisty plot showing the closeness in both networks
output$closeness_plot = renderPlot({
req(closeness_plot())
print(closeness_plot())
})
# Retrieve the plot showing the density of the betweenness in both networks
betweenness_plot = eventReactive(input$StatCompare, {
req(input$StatCompare)
req(shouldStatisticCompare)
if ('Betweenness' %in% input$statisticChoice){
g1 <- inet()
g2 <- inet2()
compare_statistics(g1, g2, statistics = c('Betweenness' = T),
net1_name = gsub("\\.\\w+$", "", input$file1$name),
net2_name = gsub("\\.\\w+$", "", input$file2$name))$betweenness_plot
} else{
NULL
}
}, ignoreInit = T)
# Plot the denisty plot showing the betweenness in both networks
output$betweenness_plot = renderPlot({
req(betweenness_plot())
print(betweenness_plot())
})
# When the metric for the actor comparison changes set the compare to FALSE
observe({
input$ActorMetric
shouldActorCompare(FALSE)
})
# Execute the actor comparison when the button is pressed
observeEvent(input$ActorComparison, {
shouldActorCompare(TRUE)
})
# Get the values for the actor comparison
actor_df = eventReactive(input$ActorComparison, {
req(dataset())
req(dataset2())
req(input$ActorMetric)
req(shouldActorCompare())
req(input$ActorNum)
if (input$ActorNum > igraph::vcount(inet())){
showModal(modalDialog(
title = "Too many nodes selected",
paste('Too many nodes were selected,', gsub("\\.\\w+$", "", input$file1$name),'does not contain that many nodes', '\nRequest was', input$ActorNum, 'nodes, whilst a maximum of', igraph::vcount(inet()), 'can be selected'),
easyClose = TRUE,
footer = modalButton('Got it!')
))
return()
} else if (input$ActorNum > igraph::vcount(inet2())){
showModal(modalDialog(
title = "Too many nodes selected",
paste('Too many nodes were selected,', gsub("\\.\\w+$", "", input$file2$name),'does not contain that many nodes', '\nRequest was', input$ActorNum, 'nodes, whilst a maximum of', igraph::vcount(inet2()), 'can be selected'),
easyClose = TRUE,
footer = modalButton('Got it!')
))
return()
}
g1 <- inet()
g2 <- inet2()
compare_actors(g1, g2, metric = input$ActorMetric,
net1_name = gsub("\\.\\w+$", "", input$file1$name),
net2_name = gsub("\\.\\w+$", "", input$file2$name),
n_actors = input$ActorNum)
})
# Show the print statements made during the Actor Comparisons
output$ActorCompText = renderPrint({
req(actor_df())
'Result:'
})
# Show the table which shows the actors and their variables
output$DTActorComp = DT::renderDataTable({
req(actor_df())
actor_df()
}
)
# When the metric for the bridge comparison changes set the compare to FALSE
observe({
input$BridgeMetric
shouldBridgeCompare(FALSE)
})
# Execute the bridge comparison when the button is pressed
observeEvent(input$BridgeComparison, {
shouldBridgeCompare(TRUE)
})
# Get the values for the bridge comparison
bridge_df = eventReactive(input$BridgeComparison, {
req(dataset())
req(dataset2())
req(input$BridgeMetric)
req(shouldBridgeCompare())
req(input$BridgeNum)
if (input$BridgeNum > igraph::ecount(inet())){
showModal(modalDialog(
title = "Too many edges selected",
paste('Too many edges were selected,', gsub("\\.\\w+$", "", input$file1$name),'does not contain that many edges', '\nRequest was', input$BridgeNum, 'edges, whilst a maximum of', igraph::ecount(inet()), 'can be selected'),
easyClose = TRUE,
footer = modalButton('Got it!')
))
return()
} else if (input$BridgeNum > igraph::ecount(inet2())){
showModal(modalDialog(
title = "Too many edges selected",
paste('Too many edges were selected,', gsub("\\.\\w+$", "", input$file2$name),'does not contain that many edges', '\nRequest was', input$BridgeNum, 'edges, whilst a maximum of', igraph::ecount(inet2()), 'can be selected'),
easyClose = TRUE,
footer = modalButton('Got it!')
))
return()
}
g1 <- inet()
g2 <- inet2()
withProgress(bridge_comp(g1, g2, method = input$BridgeMetric,
net1_name = gsub("\\.\\w+$", "", input$file1$name),
net2_name = gsub("\\.\\w+$", "", input$file2$name),
n_actors = input$BridgeNum,
drop.inf = 'drop.infs' %in% input$BridgeVars,
filter_bridge = 'Bridges' %in% input$BridgeVars),
message = 'Calculating Edge Importancies...')
})
# Show the print statements made during the Bridge Comparisons
output$BridgeCompText = renderPrint({
req(bridge_df())
'Result:'
})
# Show the table which shows the bridges and their variables
output$DTBridgeComp = DT::renderDataTable({
req(bridge_df())
bridge_df()
}
)
output$QAPtable1 = renderTable({
table = data.frame(A_1 = c(0,1,1,0,0,1), A_2 = c(1,0,0,0,1,0), A_3 = c(1,0,0,1,1,1), A_4 = c(0,0,1,0,0,1), A_5 = c(0,1,1,0,0,1), A_6 = c(1,0,1,1,1,0))
rownames(table) = c('A<sub>1</sub>', 'A<sub>2</sub>', 'A<sub>3</sub>', 'A<sub>4</sub>', 'A<sub>5</sub>', 'A<sub>6</sub>')
colnames(table) = c('A<sub>1</sub>', 'A<sub>2</sub>', 'A<sub>3</sub>', 'A<sub>4</sub>', 'A<sub>5</sub>', 'A<sub>6</sub>')
table
}, rownames = T, digits = 0, sanitize.text.function = function(x) x, width = '100%'
)
output$QAPNet = renderPlot({
net = igraph::make_empty_graph() %>% igraph::add_vertices(6) %>% igraph::add.edges(c(1,2, 1,3, 1,6, 2,5, 3,4, 3,5, 3,6, 4,6, 5,6)) %>% igraph::as.undirected()
plot(net, main = 'Example Network',
vertex.size = 20,
edge.size =4/32,
edge.arrow.size = 0.2,
vertex.color = 'orange',
vertex.label.cex = 1,
vertex.label.color = 'black',
vertex.frame.color = "black",
layout = igraph::layout_with_graphopt)
})
output$QAPtable2 = renderTable({
table = data.frame(A_1 = c(0,1,1,0,0,1), A_2 = c(1,0,0,0,1,0), A_3 = c(1,0,0,1,1,1), A_4 = c(0,0,1,0,0,1), A_5 = c(0,1,1,0,0,1), A_6 = c(1,0,1,1,1,0))
rownames(table) = c('A<sub>1</sub>', 'A<sub>2</sub>', 'A<sub>3</sub>', 'A<sub>4</sub>', 'A<sub>5</sub>', 'A<sub>6</sub>')
colnames(table) = c('A<sub>1</sub>', 'A<sub>2</sub>', 'A<sub>3</sub>', 'A<sub>4</sub>', 'A<sub>5</sub>', 'A<sub>6</sub>')
table[c('A<sub>6</sub>', 'A<sub>3</sub>', 'A<sub>1</sub>', 'A<sub>4</sub>', 'A<sub>2</sub>', 'A<sub>5</sub>'),c('A<sub>6</sub>', 'A<sub>3</sub>', 'A<sub>1</sub>', 'A<sub>4</sub>', 'A<sub>2</sub>', 'A<sub>5</sub>')]
}, rownames = T, digits = 0, sanitize.text.function = function(x) x, width = '50%'
)
# Function to export network data
output$downloadNetwork <- downloadHandler(
filename = function() {
paste("network", ".graphml", sep = "")
},
content = function(file) {
if (!is.null(network_object())) {
write_graph(network_object(), file, format = "graphml")
}
}
)
# Function to export community memberships
output$downloadMemberships <- downloadHandler(
filename = function() {
paste("community_memberships", ".csv", sep = "")
},
content = function(file) {
if (!is.null(community_memberships())){
write.csv(data.frame(Node = names(community_memberships()), Community = community_memberships()), file, row.names = FALSE)
}
}
)
output$errorMessage <- renderText({
if (is.null(network_object()) && is.null(community_memberships())) {
return("Error: No network and communities available. Please return to the 'Community Detection' tab.")
} else if (is.null(network_object())) {
return("Error: No network available. Please return to the 'Community Detection' tab.")
} else if (is.null(community_memberships())) {
return("Error: No communities available. Please return to the 'Community Detection' tab.")
} else {
return(NULL)
}
})
# Retrieve the table showing the most important actors
output$ActorTable = DT::renderDataTable({
req(dataset())
req(input$ActorMetricD)
req(input$ActorNumD)
g <- graph_from_data_frame(dataset(), directed = FALSE)
find_important_actors(g, metric = input$ActorMetricD, n_actors = input$ActorNumD)
})
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
